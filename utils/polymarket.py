"""
Polymarket extractor for the Polymarket pipeline.
This module extracts market data from Polymarket for processing.
"""
import os
import json
import logging
from datetime import datetime, timedelta
import requests
from typing import List, Dict, Any

# Import from the project
from transform_polymarket_data_capitalized import PolymarketTransformer
from config import POLYMARKET_BASE_URL, DATA_DIR

logger = logging.getLogger("polymarket_extractor")

class PolymarketExtractor:
    """Extracts market data from Polymarket"""
    
    def __init__(self):
        """Initialize the Polymarket extractor"""
        self.base_url = POLYMARKET_BASE_URL
        self.data_dir = DATA_DIR
        
        # Ensure data directory exists
        os.makedirs(self.data_dir, exist_ok=True)
    
    def extract_data(self) -> List[Dict[str, Any]]:
        """
        Extract market data from Polymarket.
        
        Returns:
            List[Dict[str, Any]]: List of market data dictionaries
        """
        try:
            # For testing, always run the transformer directly to generate test data
            # This ensures we have active markets to process
            logger.info("Using test data generated by the transformer")
            transformer = PolymarketTransformer()
            
            # Load Polymarket data (this will create the sample data file)
            if not transformer.load_polymarket_data():
                logger.error("Failed to load Polymarket data")
                return []
                
            # Transform the data
            if not transformer.transform_markets():
                logger.error("Failed to transform Polymarket data")
                return []
            
            # Load the transformed data
            transformed_file = os.path.join(self.data_dir, "transformed_markets.json")
            with open(transformed_file, 'r') as f:
                transformed_data = json.load(f)
            
            return transformed_data.get("markets", [])
            
        except Exception as e:
            logger.error(f"Error extracting Polymarket data: {str(e)}")
            return []

    def fetch_real_data(self) -> List[Dict[str, Any]]:
        """
        Fetch real market data from Polymarket API.
        This is a placeholder for when we switch to real data.
        
        Returns:
            List[Dict[str, Any]]: List of market data dictionaries
        """
        try:
            # Placeholder for real API call
            # In a real implementation, this would call the Polymarket API
            logger.info(f"Fetching market data from {self.base_url}")
            
            # For now, return empty list as this is just a placeholder
            return []
            
        except Exception as e:
            logger.error(f"Error fetching Polymarket data: {str(e)}")
            return []